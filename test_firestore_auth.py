#!/usr/bin/env python3
"""
Script para testar autentica√ß√£o e conectividade com Firestore
"""

import os
import sys
import json
from google.cloud import firestore
from google.oauth2 import service_account

# Configurar vari√°veis de ambiente
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = '/teamspace/studios/this_studio/transcription-service-key.json'
os.environ['GOOGLE_CLOUD_PROJECT'] = 'sap-accelerate'

def test_firestore_connection():
    """Testa conectividade com Firestore"""
    print("üîç Testando conectividade com Firestore...")
    
    try:
        # M√©todo 1: Usando credenciais padr√£o
        print("\n1Ô∏è‚É£ Testando com credenciais padr√£o...")
        client = firestore.Client(project='sap-accelerate')
        
        # Tenta fazer uma opera√ß√£o simples
        collection_ref = client.collection('test_connection')
        
        # Escreve documento de teste
        doc_ref = collection_ref.document('test_doc')
        doc_ref.set({
            'test': True,
            'timestamp': firestore.SERVER_TIMESTAMP
        })
        print("‚úÖ Escrita bem-sucedida")
        
        # L√™ documento de teste
        doc = doc_ref.get()
        if doc.exists:
            print("‚úÖ Leitura bem-sucedida:", doc.to_dict())
        
        # Remove documento de teste
        doc_ref.delete()
        print("‚úÖ Remo√ß√£o bem-sucedida")
        
        print("‚úÖ Conex√£o com Firestore est√° funcionando!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro com credenciais padr√£o: {e}")
        
        # M√©todo 2: Usando service account expl√≠cito
        try:
            print("\n2Ô∏è‚É£ Testando com service account expl√≠cito...")
            
            # Carrega credenciais do arquivo JSON
            credentials = service_account.Credentials.from_service_account_file(
                '/teamspace/studios/this_studio/transcription-service-key.json',
                scopes=['https://www.googleapis.com/auth/cloud-platform']
            )
            
            client = firestore.Client(project='sap-accelerate', credentials=credentials)
            
            # Testa opera√ß√£o
            collection_ref = client.collection('test_connection')
            doc_ref = collection_ref.document('test_doc')
            doc_ref.set({
                'test': True,
                'timestamp': firestore.SERVER_TIMESTAMP
            })
            print("‚úÖ Escrita bem-sucedida com service account")
            
            # L√™ e remove
            doc = doc_ref.get()
            if doc.exists:
                print("‚úÖ Leitura bem-sucedida:", doc.to_dict())
            doc_ref.delete()
            print("‚úÖ Remo√ß√£o bem-sucedida")
            
            print("‚úÖ Conex√£o com service account est√° funcionando!")
            return True
            
        except Exception as e2:
            print(f"‚ùå Erro com service account expl√≠cito: {e2}")
            return False

def check_service_account_info():
    """Verifica informa√ß√µes da conta de servi√ßo"""
    print("\nüîë Verificando informa√ß√µes da conta de servi√ßo...")
    
    try:
        with open('/teamspace/studios/this_studio/transcription-service-key.json', 'r') as f:
            key_data = json.load(f)
            
        print(f"üìß Client Email: {key_data.get('client_email')}")
        print(f"üÜî Project ID: {key_data.get('project_id')}")
        print(f"üîê Private Key ID: {key_data.get('private_key_id')}")
        print(f"üîë Type: {key_data.get('type')}")
        
        # Verifica se tem todas as chaves necess√°rias
        required_keys = ['type', 'project_id', 'private_key_id', 'private_key', 'client_email', 'client_id', 'auth_uri', 'token_uri']
        missing_keys = [key for key in required_keys if key not in key_data]
        
        if missing_keys:
            print(f"‚ùå Chaves ausentes: {missing_keys}")
        else:
            print("‚úÖ Todas as chaves necess√°rias est√£o presentes")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar credenciais: {e}")

def test_environment_variables():
    """Testa vari√°veis de ambiente"""
    print("\nüåç Verificando vari√°veis de ambiente...")
    
    google_creds = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')
    google_project = os.getenv('GOOGLE_CLOUD_PROJECT')
    
    print(f"GOOGLE_APPLICATION_CREDENTIALS: {google_creds}")
    print(f"GOOGLE_CLOUD_PROJECT: {google_project}")
    
    if google_creds and os.path.exists(google_creds):
        print("‚úÖ Arquivo de credenciais existe")
    else:
        print("‚ùå Arquivo de credenciais n√£o encontrado")
        
    if google_project:
        print("‚úÖ Projeto configurado")
    else:
        print("‚ùå Projeto n√£o configurado")

if __name__ == "__main__":
    print("üß™ Testando Autentica√ß√£o Google Cloud Firestore")
    print("=" * 50)
    
    test_environment_variables()
    check_service_account_info()
    
    if test_firestore_connection():
        print("\nüéâ Teste de conectividade bem-sucedido!")
        sys.exit(0)
    else:
        print("\nüí• Teste de conectividade falhou!")
        sys.exit(1)
